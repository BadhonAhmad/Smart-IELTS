"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@11labs";
exports.ids = ["vendor-chunks/@11labs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@11labs/client/dist/lib.modern.js":
/*!********************************************************!*\
  !*** ./node_modules/@11labs/client/dist/lib.modern.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Conversation: () => (/* binding */ x),\n/* harmony export */   WebRTCConnection: () => (/* binding */ m),\n/* harmony export */   WebSocketConnection: () => (/* binding */ p),\n/* harmony export */   createConnection: () => (/* binding */ g),\n/* harmony export */   postOverallFeedback: () => (/* binding */ D)\n/* harmony export */ });\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/livekit-client/dist/livekit-client.esm.mjs\");\nfunction o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)({}).hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},o.apply(null,arguments)}const a=new Uint8Array(0);class i{static getFullOptions(e){return o({clientTools:{},onConnect:()=>{},onDebug:()=>{},onDisconnect:()=>{},onError:()=>{},onMessage:()=>{},onAudio:()=>{},onModeChange:()=>{},onStatusChange:()=>{},onCanSendFeedbackChange:()=>{}},e)}constructor(e,t){var n=this;this.options=void 0,this.connection=void 0,this.lastInterruptTimestamp=0,this.mode=\"listening\",this.status=\"connecting\",this.volume=1,this.currentEventId=1,this.lastFeedbackEventId=1,this.canSendFeedback=!1,this.endSessionWithDetails=async function(e){\"connected\"!==n.status&&\"connecting\"!==n.status||(n.updateStatus(\"disconnecting\"),await n.handleEndSession(),n.updateStatus(\"disconnected\"),n.options.onDisconnect(e))},this.onMessage=async function(e){switch(e.type){case\"interruption\":return void n.handleInterruption(e);case\"agent_response\":return void n.handleAgentResponse(e);case\"user_transcript\":return void n.handleUserTranscript(e);case\"internal_tentative_agent_response\":return void n.handleTentativeAgentResponse(e);case\"client_tool_call\":return void await n.handleClientToolCall(e);case\"audio\":return void n.handleAudio(e);case\"ping\":return void n.connection.sendMessage({type:\"pong\",event_id:e.ping_event.event_id});default:return void n.options.onDebug(e)}},this.setVolume=({volume:e})=>{this.volume=e},this.options=e,this.connection=t,this.options.onConnect({conversationId:t.conversationId}),this.connection.onMessage(this.onMessage),this.connection.onDisconnect(this.endSessionWithDetails),this.updateStatus(\"connected\")}endSession(){return this.endSessionWithDetails({reason:\"user\"})}async handleEndSession(){this.connection.close()}updateMode(e){e!==this.mode&&(this.mode=e,this.options.onModeChange({mode:e}))}updateStatus(e){e!==this.status&&(this.status=e,this.options.onStatusChange({status:e}))}updateCanSendFeedback(){const e=this.currentEventId!==this.lastFeedbackEventId;this.canSendFeedback!==e&&(this.canSendFeedback=e,this.options.onCanSendFeedbackChange({canSendFeedback:e}))}handleInterruption(e){e.interruption_event&&(this.lastInterruptTimestamp=e.interruption_event.event_id)}handleAgentResponse(e){this.options.onMessage({source:\"ai\",message:e.agent_response_event.agent_response})}handleUserTranscript(e){this.options.onMessage({source:\"user\",message:e.user_transcription_event.user_transcript})}handleTentativeAgentResponse(e){this.options.onDebug({type:\"tentative_agent_response\",response:e.tentative_agent_response_internal_event.tentative_agent_response})}async handleClientToolCall(e){if(Object.prototype.hasOwnProperty.call(this.options.clientTools,e.client_tool_call.tool_name))try{var t;const n=null!=(t=await this.options.clientTools[e.client_tool_call.tool_name](e.client_tool_call.parameters))?t:\"Client tool execution successful.\",s=\"object\"==typeof n?JSON.stringify(n):String(n);this.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:s,is_error:!1})}catch(t){this.onError(`Client tool execution failed with following error: ${null==t?void 0:t.message}`,{clientToolName:e.client_tool_call.tool_name}),this.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:`Client tool execution failed: ${null==t?void 0:t.message}`,is_error:!0})}else{if(this.options.onUnhandledClientToolCall)return void this.options.onUnhandledClientToolCall(e.client_tool_call);this.onError(`Client tool with name ${e.client_tool_call.tool_name} is not defined on client`,{clientToolName:e.client_tool_call.tool_name}),this.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:`Client tool with name ${e.client_tool_call.tool_name} is not defined on client`,is_error:!0})}}handleAudio(e){}onError(e,t){console.error(e,t),this.options.onError(e,t)}getId(){return this.connection.conversationId}isOpen(){return\"connected\"===this.status}setMicMuted(e){}getInputByteFrequencyData(){return a}getOutputByteFrequencyData(){return a}getInputVolume(){return 0}getOutputVolume(){return 0}sendFeedback(e){this.canSendFeedback?(this.connection.sendMessage({type:\"feedback\",score:e?\"like\":\"dislike\",event_id:this.currentEventId}),this.lastFeedbackEventId=this.currentEventId,this.updateCanSendFeedback()):console.warn(0===this.lastFeedbackEventId?\"Cannot send feedback: the conversation has not started yet.\":\"Cannot send feedback: feedback has already been sent for the current response.\")}sendContextualUpdate(e){this.connection.sendMessage({type:\"contextual_update\",text:e})}sendUserMessage(e){this.connection.sendMessage({type:\"user_message\",text:e})}sendUserActivity(){this.connection.sendMessage({type:\"user_activity\"})}sendMCPToolApprovalResult(e,t){this.connection.sendMessage({type:\"mcp_tool_approval_result\",tool_call_id:e,is_approved:t})}}class r{constructor(e={}){this.queue=[],this.disconnectionDetails=null,this.onDisconnectCallback=null,this.onMessageCallback=null,this.onDebug=void 0,this.onDebug=e.onDebug}debug(e){this.onDebug&&this.onDebug(e)}onMessage(e){this.onMessageCallback=e;const t=this.queue;this.queue=[],t.length>0&&queueMicrotask(()=>{t.forEach(e)})}onDisconnect(e){this.onDisconnectCallback=e;const t=this.disconnectionDetails;t&&queueMicrotask(()=>{e(t)})}disconnect(e){var t;this.disconnectionDetails||(this.disconnectionDetails=e,null==(t=this.onDisconnectCallback)||t.call(this,e))}handleMessage(e){this.onMessageCallback?this.onMessageCallback(e):this.queue.push(e)}}function c(e){const[t,n]=e.split(\"_\");if(![\"pcm\",\"ulaw\"].includes(t))throw new Error(`Invalid format: ${e}`);const s=Number.parseInt(n);if(Number.isNaN(s))throw new Error(`Invalid sample rate: ${n}`);return{format:t,sampleRate:s}}const l=\"0.4.0\";function u(e){return!!e.type}const d=\"conversation_initiation_client_data\";function h(e){const t={type:d};var n,s,o,a,i;return e.overrides&&(t.conversation_config_override={agent:{prompt:null==(n=e.overrides.agent)?void 0:n.prompt,first_message:null==(s=e.overrides.agent)?void 0:s.firstMessage,language:null==(o=e.overrides.agent)?void 0:o.language},tts:{voice_id:null==(a=e.overrides.tts)?void 0:a.voiceId},conversation:{text_only:null==(i=e.overrides.conversation)?void 0:i.textOnly}}),e.customLlmExtraBody&&(t.custom_llm_extra_body=e.customLlmExtraBody),e.dynamicVariables&&(t.dynamic_variables=e.dynamicVariables),e.userId&&(t.user_id=e.userId),t}class p extends r{constructor(e,t,n,s){super(),this.socket=void 0,this.conversationId=void 0,this.inputFormat=void 0,this.outputFormat=void 0,this.socket=e,this.conversationId=t,this.inputFormat=n,this.outputFormat=s,this.socket.addEventListener(\"error\",e=>{setTimeout(()=>this.disconnect({reason:\"error\",message:\"The connection was closed due to a socket error.\",context:e}),0)}),this.socket.addEventListener(\"close\",e=>{this.disconnect(1e3===e.code?{reason:\"agent\",context:e}:{reason:\"error\",message:e.reason||\"The connection was closed by the server.\",context:e})}),this.socket.addEventListener(\"message\",e=>{try{const t=JSON.parse(e.data);if(!u(t))return;this.handleMessage(t)}catch(e){}})}static async create(e){let t=null;try{var n,s,o;const a=null!=(n=e.origin)?n:\"wss://api.elevenlabs.io\";let i;const r=(null==(s=e.overrides)||null==(s=s.client)?void 0:s.version)||l,d=(null==(o=e.overrides)||null==(o=o.client)?void 0:o.source)||\"js_sdk\";if(e.signedUrl){const t=e.signedUrl.includes(\"?\")?\"&\":\"?\";i=`${e.signedUrl}${t}source=${d}&version=${r}`}else i=`${a}/v1/convai/conversation?agent_id=${e.agentId}&source=${d}&version=${r}`;const m=[\"convai\"];e.authorization&&m.push(`bearer.${e.authorization}`),t=new WebSocket(i,m);const g=await new Promise((n,s)=>{t.addEventListener(\"open\",()=>{var n;const s=h(e);null==(n=t)||n.send(JSON.stringify(s))},{once:!0}),t.addEventListener(\"error\",e=>{setTimeout(()=>s(e),0)}),t.addEventListener(\"close\",s),t.addEventListener(\"message\",e=>{const t=JSON.parse(e.data);u(t)&&(\"conversation_initiation_metadata\"===t.type?n(t.conversation_initiation_metadata_event):console.warn(\"First received message is not conversation metadata.\"))},{once:!0})}),{conversation_id:v,agent_output_audio_format:f,user_input_audio_format:w}=g,y=c(null!=w?w:\"pcm_16000\"),_=c(f);return new p(t,v,y,_)}catch(e){var a;throw null==(a=t)||a.close(),e}}close(){this.socket.close()}sendMessage(e){this.socket.send(JSON.stringify(e))}}class m extends r{constructor(e,t,n,s,o={}){super(o),this.conversationId=void 0,this.inputFormat=void 0,this.outputFormat=void 0,this.room=void 0,this.isConnected=!1,this.room=e,this.conversationId=t,this.inputFormat=n,this.outputFormat=s,this.setupRoomEventListeners()}static async create(n){let s;if(\"conversationToken\"in n&&n.conversationToken)s=n.conversationToken;else{if(!(\"agentId\"in n)||!n.agentId)throw new Error(\"Either conversationToken or agentId is required for WebRTC connection\");try{var o,a;const e=(null==(o=n.overrides)||null==(o=o.client)?void 0:o.version)||l,t=(null==(a=n.overrides)||null==(a=a.client)?void 0:a.source)||\"js_sdk\",i=`https://api.elevenlabs.io/v1/convai/conversation/token?agent_id=${n.agentId}&source=${t}&version=${e}`,r=await fetch(i);if(!r.ok)throw new Error(`ElevenLabs API returned ${r.status} ${r.statusText}`);if(s=(await r.json()).token,!s)throw new Error(\"No conversation token received from API\")}catch(e){let t=e instanceof Error?e.message:String(e);throw e instanceof Error&&e.message.includes(\"401\")&&(t=\"Your agent has authentication enabled, but no signed URL or conversation token was provided.\"),new Error(`Failed to fetch conversation token for agent ${n.agentId}: ${t}`)}}const i=new livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room;try{const e=`webrtc-${Date.now()}`,o=c(\"pcm_48000\"),a=c(\"pcm_48000\"),r=new m(i,e,o,a,n),l=n.livekitUrl||\"wss://livekit.rtc.elevenlabs.io\";await i.connect(l,s),await new Promise(e=>{if(r.isConnected)e();else{const n=()=>{i.off(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Connected,n),e()};i.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Connected,n)}}),i.name&&(r.conversationId=i.name),await i.localParticipant.setMicrophoneEnabled(!0);const u=h(n);return r.debug({type:d,message:u}),await r.sendMessage(u),r}catch(e){throw await i.disconnect(),e}}setupRoomEventListeners(){var e=this;this.room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Connected,async function(){e.isConnected=!0,console.info(\"WebRTC room connected\")}),this.room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Disconnected,e=>{this.isConnected=!1,this.disconnect({reason:\"agent\",context:new CloseEvent(\"close\",{reason:null==e?void 0:e.toString()})})}),this.room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,e=>{e===livekit_client__WEBPACK_IMPORTED_MODULE_0__.ConnectionState.Disconnected&&(this.isConnected=!1,this.disconnect({reason:\"error\",message:`LiveKit connection state changed to ${e}`,context:new Event(\"connection_state_changed\")}))}),this.room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.DataReceived,(e,t)=>{try{const t=JSON.parse((new TextDecoder).decode(e));if(\"audio\"===t.type)return;u(t)?this.handleMessage(t):console.warn(\"Invalid socket event received:\",t)}catch(t){console.warn(\"Failed to parse incoming data message:\",t),console.warn(\"Raw payload:\",(new TextDecoder).decode(e))}}),this.room.on(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed,async function(e,t,n){if(e.kind===livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Kind.Audio&&n.identity.includes(\"agent\")){const t=e.attach();t.autoplay=!0,t.controls=!1,t.style.display=\"none\",document.body.appendChild(t)}})}close(){this.isConnected&&this.room.disconnect()}async sendMessage(e){if(this.isConnected&&this.room.localParticipant){if(!(\"user_audio_chunk\"in e))try{const t=(new TextEncoder).encode(JSON.stringify(e));await this.room.localParticipant.publishData(t,{reliable:!0})}catch(t){this.debug({type:\"send_message_error\",message:{message:e,error:t}}),console.error(\"Failed to send message via WebRTC:\",t)}}else console.warn(\"Cannot send message: room not connected or no local participant\")}getRoom(){return this.room}}async function g(e){const t=function(e){return e.connectionType?e.connectionType:\"conversationToken\"in e&&e.conversationToken?\"webrtc\":\"websocket\"}(e);switch(t){case\"websocket\":return p.create(e);case\"webrtc\":return m.create(e);default:throw new Error(`Unknown connection type: ${t}`)}}function v(){return[\"iPad Simulator\",\"iPhone Simulator\",\"iPod Simulator\",\"iPad\",\"iPhone\",\"iPod\"].includes(navigator.platform)||navigator.userAgent.includes(\"Mac\")&&\"ontouchend\"in document}async function f(e={default:0,android:3e3}){let t=e.default;var n;if(/android/i.test(navigator.userAgent))t=null!=(n=e.android)?n:t;else if(v()){var s;t=null!=(s=e.ios)?s:t}t>0&&await new Promise(e=>setTimeout(e,t))}class w extends i{static async startSession(e){const t=i.getFullOptions(e);t.onStatusChange({status:\"connecting\"}),t.onCanSendFeedbackChange({canSendFeedback:!1});let n=null;try{return await f(t.connectionDelay),n=await g(e),new w(t,n)}catch(e){var s;throw t.onStatusChange({status:\"disconnected\"}),null==(s=n)||s.close(),e}}}function y(e){const t=new Uint8Array(e);return window.btoa(String.fromCharCode(...t))}function _(e){const t=window.atob(e),n=t.length,s=new Uint8Array(n);for(let e=0;e<n;e++)s[e]=t.charCodeAt(e);return s.buffer}const b=new Map;function k(e,t){return async n=>{const s=b.get(e);if(s)return n.addModule(s);const o=new Blob([t],{type:\"application/javascript\"}),a=URL.createObjectURL(o);try{return await n.addModule(a),void b.set(e,a)}catch(e){URL.revokeObjectURL(a)}try{const s=`data:application/javascript;base64,${btoa(t)}`;await n.addModule(s),b.set(e,s)}catch(t){throw new Error(`Failed to load the ${e} worklet module. Make sure the browser supports AudioWorklets.`)}}}const C=k(\"raw-audio-processor\",'\\nconst BIAS = 0x84;\\nconst CLIP = 32635;\\nconst encodeTable = [\\n  0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\\n  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\\n  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\\n];\\n\\nfunction encodeSample(sample) {\\n  let sign;\\n  let exponent;\\n  let mantissa;\\n  let muLawSample;\\n  sign = (sample >> 8) & 0x80;\\n  if (sign !== 0) sample = -sample;\\n  sample = sample + BIAS;\\n  if (sample > CLIP) sample = CLIP;\\n  exponent = encodeTable[(sample>>7) & 0xFF];\\n  mantissa = (sample >> (exponent+3)) & 0x0F;\\n  muLawSample = ~(sign | (exponent << 4) | mantissa);\\n  \\n  return muLawSample;\\n}\\n\\nclass RawAudioProcessor extends AudioWorkletProcessor {\\n  constructor() {\\n    super();\\n              \\n    this.port.onmessage = ({ data }) => {\\n      switch (data.type) {\\n        case \"setFormat\":\\n          this.isMuted = false;\\n          this.buffer = []; // Initialize an empty buffer\\n          this.bufferSize = data.sampleRate / 4;\\n          this.format = data.format;\\n\\n          if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\\n            globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\\n              this.resampler = resampler;\\n            });\\n          }\\n          break;\\n        case \"setMuted\":\\n          this.isMuted = data.isMuted;\\n          break;\\n      }\\n    };\\n  }\\n  process(inputs) {\\n    if (!this.buffer) {\\n      return true;\\n    }\\n    \\n    const input = inputs[0]; // Get the first input node\\n    if (input.length > 0) {\\n      let channelData = input[0]; // Get the first channel\\'s data\\n\\n      // Resample the audio if necessary\\n      if (this.resampler) {\\n        channelData = this.resampler.full(channelData);\\n      }\\n\\n      // Add channel data to the buffer\\n      this.buffer.push(...channelData);\\n      // Get max volume \\n      let sum = 0.0;\\n      for (let i = 0; i < channelData.length; i++) {\\n        sum += channelData[i] * channelData[i];\\n      }\\n      const maxVolume = Math.sqrt(sum / channelData.length);\\n      // Check if buffer size has reached or exceeded the threshold\\n      if (this.buffer.length >= this.bufferSize) {\\n        const float32Array = this.isMuted \\n          ? new Float32Array(this.buffer.length)\\n          : new Float32Array(this.buffer);\\n\\n        let encodedArray = this.format === \"ulaw\"\\n          ? new Uint8Array(float32Array.length)\\n          : new Int16Array(float32Array.length);\\n\\n        // Iterate through the Float32Array and convert each sample to PCM16\\n        for (let i = 0; i < float32Array.length; i++) {\\n          // Clamp the value to the range [-1, 1]\\n          let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n\\n          // Scale the sample to the range [-32768, 32767]\\n          let value = sample < 0 ? sample * 32768 : sample * 32767;\\n          if (this.format === \"ulaw\") {\\n            value = encodeSample(Math.round(value));\\n          }\\n\\n          encodedArray[i] = value;\\n        }\\n\\n        // Send the buffered data to the main script\\n        this.port.postMessage([encodedArray, maxVolume]);\\n\\n        // Clear the buffer after sending\\n        this.buffer = [];\\n      }\\n    }\\n    return true; // Continue processing\\n  }\\n}\\nregisterProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n');class S{static async create({sampleRate:e,format:t,preferHeadphonesForIosDevices:n}){let s=null,o=null;try{const a={sampleRate:{ideal:e},echoCancellation:{ideal:!0},noiseSuppression:{ideal:!0}};if(v()&&n){const e=(await window.navigator.mediaDevices.enumerateDevices()).find(e=>\"audioinput\"===e.kind&&[\"airpod\",\"headphone\",\"earphone\"].find(t=>e.label.toLowerCase().includes(t)));e&&(a.deviceId={ideal:e.deviceId})}const i=navigator.mediaDevices.getSupportedConstraints().sampleRate;s=new window.AudioContext(i?{sampleRate:e}:{});const r=s.createAnalyser();i||await s.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\"),await C(s.audioWorklet),o=await navigator.mediaDevices.getUserMedia({audio:a});const c=s.createMediaStreamSource(o),l=new AudioWorkletNode(s,\"raw-audio-processor\");return l.port.postMessage({type:\"setFormat\",format:t,sampleRate:e}),c.connect(r),r.connect(l),await s.resume(),new S(s,r,l,o)}catch(e){var a,i;throw null==(a=o)||a.getTracks().forEach(e=>e.stop()),null==(i=s)||i.close(),e}}constructor(e,t,n,s){this.context=void 0,this.analyser=void 0,this.worklet=void 0,this.inputStream=void 0,this.context=e,this.analyser=t,this.worklet=n,this.inputStream=s}async close(){this.inputStream.getTracks().forEach(e=>e.stop()),await this.context.close()}setMuted(e){this.worklet.port.postMessage({type:\"setMuted\",isMuted:e})}}const M=k(\"audio-concat-processor\",'\\nconst decodeTable = [0,132,396,924,1980,4092,8316,16764];\\n\\nexport function decodeSample(muLawSample) {\\n  let sign;\\n  let exponent;\\n  let mantissa;\\n  let sample;\\n  muLawSample = ~muLawSample;\\n  sign = (muLawSample & 0x80);\\n  exponent = (muLawSample >> 4) & 0x07;\\n  mantissa = muLawSample & 0x0F;\\n  sample = decodeTable[exponent] + (mantissa << (exponent+3));\\n  if (sign !== 0) sample = -sample;\\n\\n  return sample;\\n}\\n\\nclass AudioConcatProcessor extends AudioWorkletProcessor {\\n  constructor() {\\n    super();\\n    this.buffers = []; // Initialize an empty buffer\\n    this.cursor = 0;\\n    this.currentBuffer = null;\\n    this.wasInterrupted = false;\\n    this.finished = false;\\n    \\n    this.port.onmessage = ({ data }) => {\\n      switch (data.type) {\\n        case \"setFormat\":\\n          this.format = data.format;\\n          break;\\n        case \"buffer\":\\n          this.wasInterrupted = false;\\n          this.buffers.push(\\n            this.format === \"ulaw\"\\n              ? new Uint8Array(data.buffer)\\n              : new Int16Array(data.buffer)\\n          );\\n          break;\\n        case \"interrupt\":\\n          this.wasInterrupted = true;\\n          break;\\n        case \"clearInterrupted\":\\n          if (this.wasInterrupted) {\\n            this.wasInterrupted = false;\\n            this.buffers = [];\\n            this.currentBuffer = null;\\n          }\\n      }\\n    };\\n  }\\n  process(_, outputs) {\\n    let finished = false;\\n    const output = outputs[0][0];\\n    for (let i = 0; i < output.length; i++) {\\n      if (!this.currentBuffer) {\\n        if (this.buffers.length === 0) {\\n          finished = true;\\n          break;\\n        }\\n        this.currentBuffer = this.buffers.shift();\\n        this.cursor = 0;\\n      }\\n\\n      let value = this.currentBuffer[this.cursor];\\n      if (this.format === \"ulaw\") {\\n        value = decodeSample(value);\\n      }\\n      output[i] = value / 32768;\\n      this.cursor++;\\n\\n      if (this.cursor >= this.currentBuffer.length) {\\n        this.currentBuffer = null;\\n      }\\n    }\\n\\n    if (this.finished !== finished) {\\n      this.finished = finished;\\n      this.port.postMessage({ type: \"process\", finished });\\n    }\\n\\n    return true; // Continue processing\\n  }\\n}\\n\\nregisterProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n');class I{static async create({sampleRate:e,format:t}){let n=null;try{n=new AudioContext({sampleRate:e});const s=n.createAnalyser(),o=n.createGain();o.connect(s),s.connect(n.destination),await M(n.audioWorklet);const a=new AudioWorkletNode(n,\"audio-concat-processor\");return a.port.postMessage({type:\"setFormat\",format:t}),a.connect(o),await n.resume(),new I(n,s,o,a)}catch(e){var s;throw null==(s=n)||s.close(),e}}constructor(e,t,n,s){this.context=void 0,this.analyser=void 0,this.gain=void 0,this.worklet=void 0,this.context=e,this.analyser=t,this.gain=n,this.worklet=s}async close(){await this.context.close()}}class F extends i{static async startSession(e){var t;const n=i.getFullOptions(e);n.onStatusChange({status:\"connecting\"}),n.onCanSendFeedbackChange({canSendFeedback:!1});let s=null,a=null,r=null,c=null,l=null;if(null==(t=e.useWakeLock)||t)try{l=await navigator.wakeLock.request(\"screen\")}catch(e){}try{var u;return c=await navigator.mediaDevices.getUserMedia({audio:!0}),await f(n.connectionDelay),a=await g(e),[s,r]=await Promise.all([S.create(o({},a.inputFormat,{preferHeadphonesForIosDevices:e.preferHeadphonesForIosDevices})),I.create(a.outputFormat)]),null==(u=c)||u.getTracks().forEach(e=>e.stop()),c=null,new F(n,a,s,r,l)}catch(e){var d,h,p,m;n.onStatusChange({status:\"disconnected\"}),null==(d=c)||d.getTracks().forEach(e=>e.stop()),null==(h=a)||h.close(),await(null==(p=s)?void 0:p.close()),await(null==(m=r)?void 0:m.close());try{var v;await(null==(v=l)?void 0:v.release()),l=null}catch(e){}throw e}}constructor(e,t,n,s,o){super(e,t),this.input=void 0,this.output=void 0,this.wakeLock=void 0,this.inputFrequencyData=void 0,this.outputFrequencyData=void 0,this.onInputWorkletMessage=e=>{\"connected\"===this.status&&this.connection.sendMessage({user_audio_chunk:y(e.data[0].buffer)})},this.onOutputWorkletMessage=({data:e})=>{\"process\"===e.type&&this.updateMode(e.finished?\"listening\":\"speaking\")},this.addAudioBase64Chunk=e=>{this.output.gain.gain.value=this.volume,this.output.worklet.port.postMessage({type:\"clearInterrupted\"}),this.output.worklet.port.postMessage({type:\"buffer\",buffer:_(e)})},this.fadeOutAudio=()=>{this.updateMode(\"listening\"),this.output.worklet.port.postMessage({type:\"interrupt\"}),this.output.gain.gain.exponentialRampToValueAtTime(1e-4,this.output.context.currentTime+2),setTimeout(()=>{this.output.gain.gain.value=this.volume,this.output.worklet.port.postMessage({type:\"clearInterrupted\"})},2e3)},this.calculateVolume=e=>{if(0===e.length)return 0;let t=0;for(let n=0;n<e.length;n++)t+=e[n]/255;return t/=e.length,t<0?0:t>1?1:t},this.input=n,this.output=s,this.wakeLock=o,this.input.worklet.port.onmessage=this.onInputWorkletMessage,this.output.worklet.port.onmessage=this.onOutputWorkletMessage}async handleEndSession(){await super.handleEndSession();try{var e;await(null==(e=this.wakeLock)?void 0:e.release()),this.wakeLock=null}catch(e){}await this.input.close(),await this.output.close()}handleInterruption(e){super.handleInterruption(e),this.fadeOutAudio()}handleAudio(e){this.lastInterruptTimestamp<=e.audio_event.event_id&&(this.options.onAudio(e.audio_event.audio_base_64),this.addAudioBase64Chunk(e.audio_event.audio_base_64),this.currentEventId=e.audio_event.event_id,this.updateCanSendFeedback(),this.updateMode(\"speaking\"))}setMicMuted(e){this.input.setMuted(e)}getInputByteFrequencyData(){return null!=this.inputFrequencyData||(this.inputFrequencyData=new Uint8Array(this.input.analyser.frequencyBinCount)),this.input.analyser.getByteFrequencyData(this.inputFrequencyData),this.inputFrequencyData}getOutputByteFrequencyData(){return null!=this.outputFrequencyData||(this.outputFrequencyData=new Uint8Array(this.output.analyser.frequencyBinCount)),this.output.analyser.getByteFrequencyData(this.outputFrequencyData),this.outputFrequencyData}getInputVolume(){return this.calculateVolume(this.getInputByteFrequencyData())}getOutputVolume(){return this.calculateVolume(this.getOutputByteFrequencyData())}}function D(e,t,n=\"https://api.elevenlabs.io\"){return fetch(`${n}/v1/convai/conversations/${e}/feedback`,{method:\"POST\",body:JSON.stringify({feedback:t?\"like\":\"dislike\"}),headers:{\"Content-Type\":\"application/json\"}})}class x extends i{static startSession(e){return e.textOnly?w.startSession(e):F.startSession(e)}}\n//# sourceMappingURL=lib.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@11labs/client/dist/lib.modern.js\n");

/***/ })

};
;